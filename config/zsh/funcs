# cht.sh functions
CHTSH_URL="https://cht.sh"
function cht() {
    local selected=$1

    if [[ -z $selected ]]; then
        selected=$(
            curl --silent --max-time 1 "${CHTSH_URL}/:list" | \
            rg "^[a-zA-z0-9-]+$" | \
            fzf --preview="curl --silent --max-time 1 ${CHTSH_URL}/{}"
        )
    fi

    test $selected && \
        curl --silent --max-time 1 "${CHTSH_URL}/${selected}" | \
            bat --file-name="${selected}" - || \
        return 0
}

function chtl() {
    local selected
    selected=$(
        curl --silent --max-time 1 "${CHTSH_URL}/:list" | \
        rg ":learn$" | cut --delimiter="/" --fields=1 | \
        fzf --preview="curl --silent --max-time 1 ${CHTSH_URL}/{}/:learn"
    )

    test $selected || return 0

    local query
    vared -p "Enter query: " query
    if [[ -z $query ]]; then
        query=":learn"
    fi

    curl --silent --max-time 1 "${CHTSH_URL}/${selected}/${query}" | \
    bat --file-name="${selected}/${query}" -
}

# git functions
function abr() {
    if ! git rev-parse --is-inside-work-tree 2>/dev/null ; then
        gum style \
            --border=rounded \
            --border-foreground=124 \
            "You are not in a git repository"
        return 0
    fi

    local actual_branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ $actual_branch != "main" && $actual_branch != "master" ]]; then
        gum style \
            --border=rounded \
            --border-foreground=124 \
            "Current branch is \`${actual_branch}\` checkout to \`main\` or \`master\`"
        return 0
    fi

    local local_branches=$(git branch --format="%(refname:short)" | grep -v 'master\|main')
    if [[ -z $local_branches ]]; then
        gum style --faint "There are no branches to be archived!"
        return 0
    fi

    local selected_branches=($(gum choose --no-limit $local_branches))
    for branch in $selected_branches; do
        if [[ `gum choose --header="Archive branch ${branch}" yes no` == "yes" ]]; then
            git tag archive/$branch $branch
            git branch -D $branch
        fi
    done
}

# tmux functions
function tn() {
    local session=$(basename $PWD)
    if [[ $session == $USER ]]; then
        session="home"
    fi

    if ! tmux has-session -t $session 2>/dev/null ; then
        tmux new-session -c $PWD -s $session -d
    fi

    if [[ -z $TMUX ]]; then
        tmux attach-session -t $session
    else
        tmux switch-client -t $session
    fi
}

function tf() {
    local session=$(tmux list-session -F "#{session_name}" | gum choose)
    if [[ -z $TMUX ]]; then
        tmux attach-session -t $session
    else
        tmux switch-client -t $session
    fi
}
